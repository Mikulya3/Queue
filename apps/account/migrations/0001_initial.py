<<<<<<< HEAD
# Generated by Django 4.2.2 on 2023-06-16 12:06
=======
# Generated by Django 4.1.7 on 2023-06-16 20:25
>>>>>>> ab43b1fe5b8efee48a8f6060d4dfd240102951df

import apps.account.managers
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="QueueUser",
            fields=[
<<<<<<< HEAD
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('Last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='middle_name')),
                ('position', models.CharField(choices=[('administrator', 'Administrator'), ('operator', 'Operator'), ('consultant', 'Consultant'), ('manager', 'Manager')], max_length=100, verbose_name='position')),
                ('window_number', models.CharField(max_length=100, verbose_name='window number')),
                ('note', models.TextField(blank=True, verbose_name='note')),
                ('access_level', models.CharField(max_length=100, verbose_name='ACCESS_LEVELS')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('activation_code', models.CharField(blank=True, max_length=40)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('is_blocked', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
=======
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "Last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="middle_name"
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        choices=[
                            ("administrator", "Administrator"),
                            ("operator", "Operator"),
                            ("consultant", "Consultant"),
                            ("manager", "Manager"),
                        ],
                        max_length=100,
                        verbose_name="position",
                    ),
                ),
                (
                    "window_number",
                    models.CharField(max_length=100, verbose_name="window number"),
                ),
                ("note", models.TextField(blank=True, verbose_name="note")),
                (
                    "access_level",
                    models.CharField(max_length=100, verbose_name="ACCESS_LEVELS"),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("password", models.CharField(max_length=128)),
                ("activation_code", models.CharField(blank=True, max_length=40)),
                ("username", models.CharField(max_length=100, unique=True)),
                ("is_blocked", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
>>>>>>> ab43b1fe5b8efee48a8f6060d4dfd240102951df
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", apps.account.managers.UserManager()),
            ],
        ),
    ]
